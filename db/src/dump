--
-- PostgreSQL database dump
--

-- Dumped from database version 15.4 (Homebrew)
-- Dumped by pg_dump version 15.4 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: uninadelivery; Type: SCHEMA; Schema: -; Owner: zgenny
--

CREATE SCHEMA uninadelivery;


ALTER SCHEMA uninadelivery OWNER TO zgenny;

--
-- Name: alphanumericstring; Type: DOMAIN; Schema: uninadelivery; Owner: riccardoelena
--

CREATE DOMAIN uninadelivery.alphanumericstring AS text
	CONSTRAINT alphanumericstring_check CHECK ((VALUE ~ '^\w+$'::text));


ALTER DOMAIN uninadelivery.alphanumericstring OWNER TO riccardoelena;

--
-- Name: alphnumstring; Type: DOMAIN; Schema: uninadelivery; Owner: riccardoelena
--

CREATE DOMAIN uninadelivery.alphnumstring AS text
	CONSTRAINT alphnumstring_check CHECK ((VALUE ~ '^\w*$'::text));


ALTER DOMAIN uninadelivery.alphnumstring OWNER TO riccardoelena;

--
-- Name: deposittype; Type: TYPE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TYPE uninadelivery.deposittype AS ENUM (
    'City',
    'State',
    'Country',
    'Central'
);


ALTER TYPE uninadelivery.deposittype OWNER TO riccardoelena;

--
-- Name: drivinglicencetype; Type: TYPE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TYPE uninadelivery.drivinglicencetype AS ENUM (
    'BE',
    'CE'
);


ALTER TYPE uninadelivery.drivinglicencetype OWNER TO riccardoelena;

--
-- Name: emailstring; Type: DOMAIN; Schema: uninadelivery; Owner: riccardoelena
--

CREATE DOMAIN uninadelivery.emailstring AS text
	CONSTRAINT emailstring_check CHECK ((VALUE ~ '^[a-zA-Z0-9]+[a-zA-Z0-9.]*[a-zA-Z0-9]+@[a-zA-Z.]+\.[a-zA-Z]{2,}$'::text));


ALTER DOMAIN uninadelivery.emailstring OWNER TO riccardoelena;

--
-- Name: letterstring; Type: DOMAIN; Schema: uninadelivery; Owner: riccardoelena
--

CREATE DOMAIN uninadelivery.letterstring AS text
	CONSTRAINT letterstring_check CHECK ((VALUE ~ '^[a-zA-Z]+$'::text));


ALTER DOMAIN uninadelivery.letterstring OWNER TO riccardoelena;

--
-- Name: numericstring; Type: DOMAIN; Schema: uninadelivery; Owner: riccardoelena
--

CREATE DOMAIN uninadelivery.numericstring AS text
	CONSTRAINT numericstring_check CHECK ((VALUE ~ '^\d*$'::text));


ALTER DOMAIN uninadelivery.numericstring OWNER TO riccardoelena;

--
-- Name: transporttype; Type: TYPE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TYPE uninadelivery.transporttype AS ENUM (
    'WheeledSmall',
    'WheeledLarge',
    'Rails',
    'Water',
    'Air'
);


ALTER TYPE uninadelivery.transporttype OWNER TO riccardoelena;

--
-- Name: worldzone; Type: TYPE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TYPE uninadelivery.worldzone AS ENUM (
    'NA',
    'EUW',
    'EUNE',
    'LATAM',
    'MIDEAST',
    'CKJ',
    'SEA',
    'IND',
    'RUS',
    'STAN',
    'OC',
    'AFN',
    'AFC',
    'AFS'
);


ALTER TYPE uninadelivery.worldzone OWNER TO riccardoelena;

--
-- Name: isaddressforsomethingspecific_func(); Type: FUNCTION; Schema: uninadelivery; Owner: riccardoelena
--

CREATE FUNCTION uninadelivery.isaddressforsomethingspecific_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE 
    flag integer;
    query text = 'SELECT COUNT(*) 
                  INTO flag
                  FROM ? 
                  WHERE AddressNo = NEW.AddressNo AND 
                        Street = NEW.Street AND 
                        ZipCode = NEW.ZipCode AND  
                        Country = NEW.Country';
    tableName text;
BEGIN
    FOREACH tableName IN ARRAY TG_ARGV LOOP

      IF tableName == 'Deposit' THEN
        query = query || " AND DepositType <> 'City'";
      ELSIF tableName == 'Account' THEN
        IF NEW.DepositType = 'City' THEN
          RETURN NEW;
        END IF;
      ELSE 
        perform raise_custom_error('E0003');
      END IF;
          
      EXECUTE IMMEDIATE query USING tableName;
      IF flag > 0 THEN
        perform raise_custom_error('E0002');
      END IF;
    END LOOP;

    RETURN NEW;
  END;
$$;


ALTER FUNCTION uninadelivery.isaddressforsomethingspecific_func() OWNER TO riccardoelena;

--
-- Name: raise_custom_error(text); Type: FUNCTION; Schema: uninadelivery; Owner: riccardoelena
--

CREATE FUNCTION uninadelivery.raise_custom_error(p_error_code text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_error_message TEXT;
BEGIN
  -- Find error message in the custom_error_messages table 
  SELECT error_message INTO v_error_message
  FROM custom_error_messages
  WHERE error_code = p_error_code;

  -- Raise exception with the retrieved error message
  RAISE EXCEPTION USING 
            ERRCODE = p_error_code, 
            MESSAGE = v_error_message;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'Error % not found', p_error_code;
END;
$$;


ALTER FUNCTION uninadelivery.raise_custom_error(p_error_code text) OWNER TO riccardoelena;

--
-- Name: validemployeebirthdate_func(); Type: FUNCTION; Schema: uninadelivery; Owner: riccardoelena
--

CREATE FUNCTION uninadelivery.validemployeebirthdate_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    employee_age integer;
  BEGIN
    SELECT EXTRACT( YEAR FROM age(Birthdate))
      INTO employee_age
      FROM account
      WHERE Email = NEW.Email;

    IF employee_age < 18 THEN
      perform raise_custom_error('E0001');
    END IF;
    RETURN NEW;
  END;
$$;


ALTER FUNCTION uninadelivery.validemployeebirthdate_func() OWNER TO riccardoelena;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: Order; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery."Order" (
    orderid integer NOT NULL,
    emissiondate date NOT NULL,
    isexpress boolean,
    extrawarranty smallint NOT NULL,
    iscompleted boolean,
    email uninadelivery.emailstring,
    CONSTRAINT formatorderemissiondate CHECK ((emissiondate <= CURRENT_DATE)),
    CONSTRAINT formatorderextrawarranty CHECK ((extrawarranty >= 0))
);


ALTER TABLE uninadelivery."Order" OWNER TO riccardoelena;

--
-- Name: Order_orderid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE SEQUENCE uninadelivery."Order_orderid_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery."Order_orderid_seq" OWNER TO riccardoelena;

--
-- Name: Order_orderid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: riccardoelena
--

ALTER SEQUENCE uninadelivery."Order_orderid_seq" OWNED BY uninadelivery."Order".orderid;


--
-- Name: account; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.account (
    name uninadelivery.letterstring NOT NULL,
    surname uninadelivery.letterstring NOT NULL,
    email uninadelivery.emailstring NOT NULL,
    birthdate date NOT NULL,
    propic text,
    password text,
    addressno uninadelivery.alphnumstring NOT NULL,
    street uninadelivery.alphnumstring NOT NULL,
    zipcode uninadelivery.numericstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    CONSTRAINT formataccountaddressno CHECK (((addressno)::text ~ '^[1-9]\d*[a-z]?(?:BIS)?$'::text)),
    CONSTRAINT formataccountpassword CHECK ((password ~ '\b[A-Fa-f0-9]{64}\b'::text)),
    CONSTRAINT formataccountpropic CHECK ((propic ~ '^\/9j\/4AAQSkZJRg[-A-Za-z0-9+\/]*={0,2}$'::text)),
    CONSTRAINT validaccountbirthdate CHECK ((EXTRACT(year FROM age((birthdate)::timestamp with time zone)) >= (16)::numeric))
);


ALTER TABLE uninadelivery.account OWNER TO riccardoelena;

--
-- Name: area; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.area (
    zipcode uninadelivery.numericstring NOT NULL,
    city uninadelivery.letterstring NOT NULL,
    state uninadelivery.letterstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    worldzone uninadelivery.worldzone NOT NULL
);


ALTER TABLE uninadelivery.area OWNER TO riccardoelena;

--
-- Name: contains; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.contains (
    orderid integer NOT NULL,
    name text,
    supplier uninadelivery.alphnumstring,
    issent boolean,
    quantity smallint NOT NULL,
    CONSTRAINT formatcontainsquantity CHECK ((quantity > 0))
);


ALTER TABLE uninadelivery.contains OWNER TO riccardoelena;

--
-- Name: covers; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.covers (
    transportid integer NOT NULL,
    zipcode uninadelivery.numericstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    date date
);


ALTER TABLE uninadelivery.covers OWNER TO riccardoelena;

--
-- Name: custom_error_messages; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.custom_error_messages (
    error_code text NOT NULL,
    error_message text NOT NULL
);


ALTER TABLE uninadelivery.custom_error_messages OWNER TO riccardoelena;

--
-- Name: deposit; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.deposit (
    depositid integer NOT NULL,
    occupiedspace real NOT NULL,
    maxcapacity real NOT NULL,
    deposittype uninadelivery.deposittype,
    addressno uninadelivery.alphnumstring NOT NULL,
    street uninadelivery.alphnumstring NOT NULL,
    zipcode uninadelivery.numericstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    CONSTRAINT checkdepositfullness CHECK ((occupiedspace <= maxcapacity)),
    CONSTRAINT foramtdepositmaxcapacity CHECK ((maxcapacity > (0)::double precision)),
    CONSTRAINT foramtdepositoccupiedspace CHECK ((occupiedspace >= (0)::double precision)),
    CONSTRAINT formatdepositaddressno CHECK (((addressno)::text ~ '^[1-9]\d*[a-z]?(?:BIS)?$'::text))
);


ALTER TABLE uninadelivery.deposit OWNER TO riccardoelena;

--
-- Name: deposit_depositid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE SEQUENCE uninadelivery.deposit_depositid_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery.deposit_depositid_seq OWNER TO riccardoelena;

--
-- Name: deposit_depositid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: riccardoelena
--

ALTER SEQUENCE uninadelivery.deposit_depositid_seq OWNED BY uninadelivery.deposit.depositid;


--
-- Name: driver; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.driver (
    businessmail uninadelivery.emailstring NOT NULL,
    drivinglicencetype uninadelivery.drivinglicencetype NOT NULL,
    isavailable boolean,
    email uninadelivery.emailstring,
    depositid integer NOT NULL
);


ALTER TABLE uninadelivery.driver OWNER TO riccardoelena;

--
-- Name: drives; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.drives (
    transportid integer NOT NULL,
    businessmail uninadelivery.emailstring NOT NULL,
    date date NOT NULL
);


ALTER TABLE uninadelivery.drives OWNER TO riccardoelena;

--
-- Name: operator; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.operator (
    email uninadelivery.emailstring NOT NULL,
    businessmail uninadelivery.emailstring NOT NULL
);


ALTER TABLE uninadelivery.operator OWNER TO riccardoelena;

--
-- Name: product; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.product (
    category uninadelivery.letterstring NOT NULL,
    name text NOT NULL,
    supplier uninadelivery.alphnumstring DEFAULT 'UninaDelivery'::text NOT NULL,
    description text NOT NULL,
    packagesizeliters real NOT NULL,
    isfragile boolean,
    price numeric(100,2),
    CONSTRAINT checkproductdescriptionontopic CHECK (((description ~~* (('% '::text || (category)::text) || ' %'::text)) AND (description ~~* (('% '::text || name) || ' %'::text)) AND (description ~~* (('% '::text || (supplier)::text) || ' %'::text)))),
    CONSTRAINT formatproductdescription CHECK ((description ~ '^[a-zA-Z0-9]+[\ a-zA-Z0-9!@#$%^&*()_+{}\[\]:;<>,.?~\\\/-]*$'::text)),
    CONSTRAINT formatproductname CHECK ((name ~ '^[a-zA-Z0-9]+[\ a-zA-Z0-9!@#$%^&*()_+{}\[\]:;<>,.?~\\\/-]*$'::text)),
    CONSTRAINT formatproductpackagesizeliters CHECK ((packagesizeliters > (0)::double precision)),
    CONSTRAINT formatproductprice CHECK ((price > (0)::numeric))
);


ALTER TABLE uninadelivery.product OWNER TO riccardoelena;

--
-- Name: shipment; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.shipment (
    shipmentid integer NOT NULL,
    shippingdate date NOT NULL,
    hasarrived boolean,
    shippedfrom integer NOT NULL,
    directedto integer,
    businessmail uninadelivery.emailstring NOT NULL,
    transportid integer NOT NULL,
    CONSTRAINT checkdifferentstartenddeposits CHECK ((shippedfrom <> directedto))
);


ALTER TABLE uninadelivery.shipment OWNER TO riccardoelena;

--
-- Name: shipment_shipmentid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE SEQUENCE uninadelivery.shipment_shipmentid_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery.shipment_shipmentid_seq OWNER TO riccardoelena;

--
-- Name: shipment_shipmentid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: riccardoelena
--

ALTER SEQUENCE uninadelivery.shipment_shipmentid_seq OWNED BY uninadelivery.shipment.shipmentid;


--
-- Name: ships; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.ships (
    shipmentid integer NOT NULL,
    orderid integer NOT NULL
);


ALTER TABLE uninadelivery.ships OWNER TO riccardoelena;

--
-- Name: stores; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.stores (
    name text NOT NULL,
    supplier text NOT NULL,
    depositid integer NOT NULL,
    quantity integer NOT NULL,
    CONSTRAINT formatstoresquantity CHECK ((quantity > 0))
);


ALTER TABLE uninadelivery.stores OWNER TO riccardoelena;

--
-- Name: transport; Type: TABLE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TABLE uninadelivery.transport (
    transportid integer NOT NULL,
    occupiedspace real NOT NULL,
    maxcapacity real NOT NULL,
    isavailable boolean,
    transporttype uninadelivery.transporttype NOT NULL,
    depositid integer NOT NULL,
    CONSTRAINT checktransportfullness CHECK ((occupiedspace <= maxcapacity)),
    CONSTRAINT formattransportmaxcapacity CHECK ((maxcapacity > (0)::double precision)),
    CONSTRAINT formattransportoccupiedspace CHECK ((occupiedspace >= (0)::double precision))
);


ALTER TABLE uninadelivery.transport OWNER TO riccardoelena;

--
-- Name: transport_transportid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: riccardoelena
--

CREATE SEQUENCE uninadelivery.transport_transportid_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery.transport_transportid_seq OWNER TO riccardoelena;

--
-- Name: transport_transportid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: riccardoelena
--

ALTER SEQUENCE uninadelivery.transport_transportid_seq OWNED BY uninadelivery.transport.transportid;


--
-- Name: Order orderid; Type: DEFAULT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery."Order" ALTER COLUMN orderid SET DEFAULT nextval('uninadelivery."Order_orderid_seq"'::regclass);


--
-- Name: deposit depositid; Type: DEFAULT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.deposit ALTER COLUMN depositid SET DEFAULT nextval('uninadelivery.deposit_depositid_seq'::regclass);


--
-- Name: shipment shipmentid; Type: DEFAULT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.shipment ALTER COLUMN shipmentid SET DEFAULT nextval('uninadelivery.shipment_shipmentid_seq'::regclass);


--
-- Name: transport transportid; Type: DEFAULT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.transport ALTER COLUMN transportid SET DEFAULT nextval('uninadelivery.transport_transportid_seq'::regclass);


--
-- Data for Name: Order; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery."Order" (orderid, emissiondate, isexpress, extrawarranty, iscompleted, email) FROM stdin;
\.


--
-- Data for Name: account; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.account (name, surname, email, birthdate, propic, password, addressno, street, zipcode, country) FROM stdin;
\.


--
-- Data for Name: area; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.area (zipcode, city, state, country, worldzone) FROM stdin;
\.


--
-- Data for Name: contains; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.contains (orderid, name, supplier, issent, quantity) FROM stdin;
\.


--
-- Data for Name: covers; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.covers (transportid, zipcode, country, date) FROM stdin;
\.


--
-- Data for Name: custom_error_messages; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.custom_error_messages (error_code, error_message) FROM stdin;
E0001	Account birthdate is too young to be an employee
E0002	This address is already occupied
E0003	Incompatible table in input
\.


--
-- Data for Name: deposit; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.deposit (depositid, occupiedspace, maxcapacity, deposittype, addressno, street, zipcode, country) FROM stdin;
\.


--
-- Data for Name: driver; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.driver (businessmail, drivinglicencetype, isavailable, email, depositid) FROM stdin;
\.


--
-- Data for Name: drives; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.drives (transportid, businessmail, date) FROM stdin;
\.


--
-- Data for Name: operator; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.operator (email, businessmail) FROM stdin;
\.


--
-- Data for Name: product; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.product (category, name, supplier, description, packagesizeliters, isfragile, price) FROM stdin;
\.


--
-- Data for Name: shipment; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.shipment (shipmentid, shippingdate, hasarrived, shippedfrom, directedto, businessmail, transportid) FROM stdin;
\.


--
-- Data for Name: ships; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.ships (shipmentid, orderid) FROM stdin;
\.


--
-- Data for Name: stores; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.stores (name, supplier, depositid, quantity) FROM stdin;
\.


--
-- Data for Name: transport; Type: TABLE DATA; Schema: uninadelivery; Owner: riccardoelena
--

COPY uninadelivery.transport (transportid, occupiedspace, maxcapacity, isavailable, transporttype, depositid) FROM stdin;
\.


--
-- Name: Order_orderid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: riccardoelena
--

SELECT pg_catalog.setval('uninadelivery."Order_orderid_seq"', 1, false);


--
-- Name: deposit_depositid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: riccardoelena
--

SELECT pg_catalog.setval('uninadelivery.deposit_depositid_seq', 1, false);


--
-- Name: shipment_shipmentid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: riccardoelena
--

SELECT pg_catalog.setval('uninadelivery.shipment_shipmentid_seq', 1, false);


--
-- Name: transport_transportid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: riccardoelena
--

SELECT pg_catalog.setval('uninadelivery.transport_transportid_seq', 1, false);


--
-- Name: account account_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.account
    ADD CONSTRAINT account_pk PRIMARY KEY (email);


--
-- Name: area area_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.area
    ADD CONSTRAINT area_pk PRIMARY KEY (zipcode, country);


--
-- Name: custom_error_messages custom_error_messages_pkey; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.custom_error_messages
    ADD CONSTRAINT custom_error_messages_pkey PRIMARY KEY (error_code);


--
-- Name: deposit deposit_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.deposit
    ADD CONSTRAINT deposit_pk PRIMARY KEY (depositid);


--
-- Name: driver driver_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.driver
    ADD CONSTRAINT driver_pk PRIMARY KEY (businessmail);


--
-- Name: ships noduplicateorderinshipment; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.ships
    ADD CONSTRAINT noduplicateorderinshipment UNIQUE (shipmentid, orderid);


--
-- Name: stores noduplicateproductindeposit; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.stores
    ADD CONSTRAINT noduplicateproductindeposit UNIQUE (name, supplier, depositid);


--
-- Name: contains noduplicateproductperorder; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.contains
    ADD CONSTRAINT noduplicateproductperorder UNIQUE (orderid, name, supplier);


--
-- Name: covers onlyoneareaperday; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.covers
    ADD CONSTRAINT onlyoneareaperday UNIQUE (transportid, date);


--
-- Name: deposit onlyonedepositperaddress; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.deposit
    ADD CONSTRAINT onlyonedepositperaddress UNIQUE (addressno, street, zipcode, country);


--
-- Name: drives onlyonetravelperdaydriver; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT onlyonetravelperdaydriver UNIQUE (businessmail, date);


--
-- Name: drives onlyonetravelperdaytransport; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT onlyonetravelperdaytransport UNIQUE (transportid, date);


--
-- Name: operator operator_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.operator
    ADD CONSTRAINT operator_pk PRIMARY KEY (businessmail);


--
-- Name: Order order_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery."Order"
    ADD CONSTRAINT order_pk PRIMARY KEY (orderid);


--
-- Name: product product_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.product
    ADD CONSTRAINT product_pk PRIMARY KEY (name, supplier);


--
-- Name: shipment shipment_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_pk PRIMARY KEY (shipmentid);


--
-- Name: transport transport_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.transport
    ADD CONSTRAINT transport_pk PRIMARY KEY (transportid);


--
-- Name: account isaddressforsomethingspecificaccount; Type: TRIGGER; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TRIGGER isaddressforsomethingspecificaccount BEFORE INSERT ON uninadelivery.account FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaddressforsomethingspecific_func('Deposit');


--
-- Name: deposit isaddressforsomethingspecificdeposit; Type: TRIGGER; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TRIGGER isaddressforsomethingspecificdeposit BEFORE INSERT ON uninadelivery.deposit FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaddressforsomethingspecific_func('Account');


--
-- Name: driver validdriverbirthdate; Type: TRIGGER; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TRIGGER validdriverbirthdate BEFORE INSERT ON uninadelivery.driver FOR EACH ROW EXECUTE FUNCTION uninadelivery.validemployeebirthdate_func();


--
-- Name: operator validoperatorbirthdate; Type: TRIGGER; Schema: uninadelivery; Owner: riccardoelena
--

CREATE TRIGGER validoperatorbirthdate BEFORE INSERT ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.validemployeebirthdate_func();


--
-- Name: account account_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.account
    ADD CONSTRAINT account_fk FOREIGN KEY (zipcode, country) REFERENCES uninadelivery.area(zipcode, country) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: contains contains_fk_order; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.contains
    ADD CONSTRAINT contains_fk_order FOREIGN KEY (orderid) REFERENCES uninadelivery."Order"(orderid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: contains contains_fk_product; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.contains
    ADD CONSTRAINT contains_fk_product FOREIGN KEY (name, supplier) REFERENCES uninadelivery.product(name, supplier) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: covers covers_fk_area; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.covers
    ADD CONSTRAINT covers_fk_area FOREIGN KEY (zipcode, country) REFERENCES uninadelivery.area(zipcode, country) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: covers covers_fk_transport; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.covers
    ADD CONSTRAINT covers_fk_transport FOREIGN KEY (transportid) REFERENCES uninadelivery.transport(transportid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: deposit deposit_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.deposit
    ADD CONSTRAINT deposit_fk FOREIGN KEY (zipcode, country) REFERENCES uninadelivery.area(zipcode, country) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: driver driver_fk_account; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.driver
    ADD CONSTRAINT driver_fk_account FOREIGN KEY (email) REFERENCES uninadelivery.account(email) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: driver driver_fk_deposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.driver
    ADD CONSTRAINT driver_fk_deposit FOREIGN KEY (depositid) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: drives drives_fk_driver; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT drives_fk_driver FOREIGN KEY (businessmail) REFERENCES uninadelivery.driver(businessmail) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: drives drives_fk_transport; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT drives_fk_transport FOREIGN KEY (transportid) REFERENCES uninadelivery.transport(transportid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Order order_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery."Order"
    ADD CONSTRAINT order_fk FOREIGN KEY (email) REFERENCES uninadelivery.account(email) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: shipment shipment_fk_arrivaldeposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_arrivaldeposit FOREIGN KEY (directedto) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shipment shipment_fk_operator; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_operator FOREIGN KEY (businessmail) REFERENCES uninadelivery.operator(businessmail) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shipment shipment_fk_startdeposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_startdeposit FOREIGN KEY (shippedfrom) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shipment shipment_fk_transport; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_transport FOREIGN KEY (transportid) REFERENCES uninadelivery.transport(transportid) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: ships ships_fk_order; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.ships
    ADD CONSTRAINT ships_fk_order FOREIGN KEY (orderid) REFERENCES uninadelivery."Order"(orderid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ships ships_fk_shipment; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.ships
    ADD CONSTRAINT ships_fk_shipment FOREIGN KEY (shipmentid) REFERENCES uninadelivery.shipment(shipmentid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: stores stores_fk_deposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.stores
    ADD CONSTRAINT stores_fk_deposit FOREIGN KEY (depositid) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: stores stores_fk_product; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.stores
    ADD CONSTRAINT stores_fk_product FOREIGN KEY (name, supplier) REFERENCES uninadelivery.product(name, supplier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: transport transport_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: riccardoelena
--

ALTER TABLE ONLY uninadelivery.transport
    ADD CONSTRAINT transport_fk FOREIGN KEY (depositid) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

