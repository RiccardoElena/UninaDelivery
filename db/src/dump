--
-- PostgreSQL database dump
--

-- Dumped from database version 15.4 (Homebrew)
-- Dumped by pg_dump version 15.4 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: uninadelivery; Type: SCHEMA; Schema: -; Owner: zgenny
--

CREATE SCHEMA uninadelivery;


ALTER SCHEMA uninadelivery OWNER TO zgenny;

--
-- Name: alphanumericstring; Type: DOMAIN; Schema: uninadelivery; Owner: zgenny
--

CREATE DOMAIN uninadelivery.alphanumericstring AS text
	CONSTRAINT alphanumericstring_check CHECK ((VALUE ~ '^\w+$'::text));


ALTER DOMAIN uninadelivery.alphanumericstring OWNER TO zgenny;

--
-- Name: alphanumstring; Type: DOMAIN; Schema: uninadelivery; Owner: zgenny
--

CREATE DOMAIN uninadelivery.alphanumstring AS text
	CONSTRAINT alphanumstring_check CHECK ((VALUE ~ '^\w+[\s\w\.]*$'::text));


ALTER DOMAIN uninadelivery.alphanumstring OWNER TO zgenny;

--
-- Name: deposittype; Type: TYPE; Schema: uninadelivery; Owner: zgenny
--

CREATE TYPE uninadelivery.deposittype AS ENUM (
    'City',
    'State',
    'Country',
    'Central'
);


ALTER TYPE uninadelivery.deposittype OWNER TO zgenny;

--
-- Name: drivinglicencetype; Type: TYPE; Schema: uninadelivery; Owner: zgenny
--

CREATE TYPE uninadelivery.drivinglicencetype AS ENUM (
    'BE',
    'CE'
);


ALTER TYPE uninadelivery.drivinglicencetype OWNER TO zgenny;

--
-- Name: emailstring; Type: DOMAIN; Schema: uninadelivery; Owner: zgenny
--

CREATE DOMAIN uninadelivery.emailstring AS text
	CONSTRAINT emailstring_check CHECK ((VALUE ~ '^[a-zA-Z0-9]+[a-zA-Z0-9.]*[a-zA-Z0-9]+@[a-zA-Z.]+\.[a-zA-Z]{2,}$'::text));


ALTER DOMAIN uninadelivery.emailstring OWNER TO zgenny;

--
-- Name: letterstring; Type: DOMAIN; Schema: uninadelivery; Owner: zgenny
--

CREATE DOMAIN uninadelivery.letterstring AS text
	CONSTRAINT letterstring_check CHECK ((VALUE ~ '^[a-zA-Z]+$'::text));


ALTER DOMAIN uninadelivery.letterstring OWNER TO zgenny;

--
-- Name: numericstring; Type: DOMAIN; Schema: uninadelivery; Owner: zgenny
--

CREATE DOMAIN uninadelivery.numericstring AS text
	CONSTRAINT numericstring_check CHECK ((VALUE ~ '^\d*$'::text));


ALTER DOMAIN uninadelivery.numericstring OWNER TO zgenny;

--
-- Name: transporttype; Type: TYPE; Schema: uninadelivery; Owner: zgenny
--

CREATE TYPE uninadelivery.transporttype AS ENUM (
    'WheeledSmall',
    'WheeledLarge',
    'Rails',
    'Water',
    'Air'
);


ALTER TYPE uninadelivery.transporttype OWNER TO zgenny;

--
-- Name: worldzone; Type: TYPE; Schema: uninadelivery; Owner: zgenny
--

CREATE TYPE uninadelivery.worldzone AS ENUM (
    'NA',
    'EUW',
    'EUNE',
    'LATAM',
    'MIDEAST',
    'CKJ',
    'SEA',
    'IND',
    'RUS',
    'STAN',
    'OC',
    'AFN',
    'AFC',
    'AFS'
);


ALTER TYPE uninadelivery.worldzone OWNER TO zgenny;

--
-- Name: correctoccupiedspaceforshipment_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.correctoccupiedspaceforshipment_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE
ShipID shipment.ShipmentID%TYPE;
SumOfProduct product.PackageSizeLiters%TYPE;

BEGIN
SELECT ShipmentID
  INTO ShipID
  FROM shipment
  WHERE TransportID = NEW.TransportID
  ORDER BY ShippingDate DESC LIMIT 1;

SELECT sum(PackageSizeLiters*quantity)
  INTO SumOfProduct
  FROM product NATURAL JOIN "Order" NATURAL JOIN Ships
  WHERE shipmentID = ShipID;

IF SumOfProduct < NEW.OccupiedSpace THEN
  perform raise_custom_error('E0014');
END IF;
RETURN NEW;
END;

$$;


ALTER FUNCTION uninadelivery.correctoccupiedspaceforshipment_func() OWNER TO zgenny;

--
-- Name: correcttransportassignment_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.correcttransportassignment_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  Dtype Deposit.DepositType%TYPE;
BEGIN

  SELECT DepositType
  INTO Dtype
  FROM Deposit
  WHERE depositid = NEW.depositid;

  IF NEW.TransportType = 'WheeledLarge' AND Dtype = 'City' THEN
    perform raise_custom_error('E0010');
  END IF;
  IF NEW.TransportType = 'Rails' AND (Dtype = 'City' OR Dtype = 'State') THEN
    perform raise_custom_error('E0010');
  END IF;
  IF (NEW.TransportType = 'Air' OR NEW.TransportType = 'Water') AND (Dtype = 'City' OR Dtype = 'State' OR Dtype = 'Country') THEN
    perform raise_custom_error('E0010');
  END IF;

  RETURN NEW;

END;
$$;


ALTER FUNCTION uninadelivery.correcttransportassignment_func() OWNER TO zgenny;

--
-- Name: correcttransportfordrivinglicence_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.correcttransportfordrivinglicence_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  drivinglicence Driver.drivinglicencetype%TYPE;
  Ttype Transport.transporttype%TYPE;
BEGIN

  SELECT drivinglicencetype
  INTO drivinglicence
  FROM driver
  WHERE BusinessMail = NEW.BusinessMail;


  SELECT transporttype
  INTO Ttype
  FROM transport
  WHERE transportid = NEW.transportid;

  IF Ttype = 'WheeledSmall' THEN
    RETURN NEW;
  END IF;
  IF Ttype = 'WheeledLarge' AND drivinglicence = 'CE' THEN
    RETURN NEW;
  END IF;

  perform raise_custom_error('E0009');
END;
$$;


ALTER FUNCTION uninadelivery.correcttransportfordrivinglicence_func() OWNER TO zgenny;

--
-- Name: createcoversforshipment(uninadelivery.numericstring, uninadelivery.letterstring, integer, date); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.createcoversforshipment(zc uninadelivery.numericstring, cy uninadelivery.letterstring, tid integer, d date) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NOT EXISTS (
      SELECT 1
      FROM Covers
      WHERE ZipCode = ZC
        AND Country = Cy
        AND transportid = Tid
        AND Date = D
    ) THEN
      INSERT INTO Covers
        VALUES (Tid, Zc, Cy, D);
  END IF;

EXCEPTION
  WHEN unique_violation THEN 
    perform raise_custom_error('E0006');
END;
$$;


ALTER FUNCTION uninadelivery.createcoversforshipment(zc uninadelivery.numericstring, cy uninadelivery.letterstring, tid integer, d date) OWNER TO zgenny;

--
-- Name: formatdriverbusinessmail_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.formatdriverbusinessmail_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  name_initial text;
  surname text;
  omoniums_num integer;
  new_mail text;
BEGIN

  SELECT Name, surname
  INTO name_initial, surname
  FROM Account
  WHERE email=new.email;

  name_initial = SUBSTR(name_initial, 1,1);

  new_mail = name_initial || '.' || surname;

  SELECT COUNT(*)
  INTO omoniums_num
  FROM Driver
  WHERE businessmail LIKE (new_mail || '%');

  IF omoniums_num > 0 THEN
    new_mail = new_mail || omoniums_num::text;
  END IF;

  new_mail = new_mail || '@uninadelivery.Driver.com';

  IF NEW.businessmail <> new_mail THEN
    RAISE NOTICE 'Non standard businessmail inserted. Substituting it with %', new_mail;
  END IF;

  NEW.businessmail = new_mail;

  RETURN NEW;

END;
$$;


ALTER FUNCTION uninadelivery.formatdriverbusinessmail_func() OWNER TO zgenny;

--
-- Name: formatoperatorbusinessmail_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.formatoperatorbusinessmail_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  name_initial text;
  surname text;
  omoniums_num integer;
  new_mail text;
BEGIN

  SELECT Name, surname
  INTO name_initial, surname
  FROM Account
  WHERE email=new.email;

  name_initial = SUBSTR(name_initial, 1,1);

  new_mail = name_initial || '.' || surname;

  SELECT COUNT(*)
  INTO omoniums_num
  FROM operator
  WHERE businessmail LIKE (new_mail || '%');

  IF omoniums_num > 0 THEN
    new_mail = new_mail || omoniums_num::text;
  END IF;

  new_mail = new_mail || '@uninadelivery.operator.com';

  IF NEW.businessmail <> new_mail THEN
    RAISE NOTICE 'Non standard businessmail inserted. Substituting it with %', new_mail;
  END IF;

  NEW.businessmail = new_mail;

  RETURN NEW;

END;
$$;


ALTER FUNCTION uninadelivery.formatoperatorbusinessmail_func() OWNER TO zgenny;

--
-- Name: isaccountreachable_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.isaccountreachable_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  acc_city Area.City%TYPE;
  acc_state Area.State%TYPE;
  acc_worldZone Area.WorldZone%TYPE;
BEGIN

  SELECT City, State, WorldZone
  INTO acc_city, acc_state, acc_worldZone
  FROM Area
  WHERE ZipCode = New.ZipCode AND Country = NEW.Country;

  IF NOT EXISTS (
    SELECT 1
    FROM Area NATURAL JOIN Deposit
    WHERE City=acc_city AND State = acc_state AND Country = NEW.Country AND WorldZone = acc_worldZone
  ) THEN
    perform raise_custom_error('E0007');
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION uninadelivery.isaccountreachable_func() OWNER TO zgenny;

--
-- Name: isaddressforsomethingspecific_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.isaddressforsomethingspecific_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
  DECLARE 
    flag integer;
    queryp1 text = 'SELECT COUNT(*) 
                  FROM ';
    queryp2 text = ' 
                  WHERE (AddressNo = $1 AND 
                        Street = $2 AND 
                        ZipCode = $3 AND  
                        Country = $4';
    tableName text;
BEGIN
    FOREACH tableName IN ARRAY TG_ARGV LOOP

      IF tableName = 'Deposit' THEN
        queryp2 = queryp2 || ' AND DepositType <> ''City'' ';
      ELSIF tableName = 'Account' THEN
        IF NEW.DepositType = 'City' THEN
          RETURN NEW;
        END IF;
      ELSE 
        perform raise_custom_error('E0003');
      END IF;
          
      queryp1 = queryp1 || tableName || queryp2 || ')';
      EXECUTE queryp1 into flag USING NEW.AddressNo, NEW.Street, NEW.ZipCode, NEW.Country;
      IF flag > 0 THEN
        perform raise_custom_error('E0002');
      END IF;
    END LOOP;

    RETURN NEW;
  END;
$_$;


ALTER FUNCTION uninadelivery.isaddressforsomethingspecific_func() OWNER TO zgenny;

--
-- Name: iscitydepositshippingtoclient(uninadelivery.numericstring, uninadelivery.letterstring, integer); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.iscitydepositshippingtoclient(zc uninadelivery.numericstring, cy uninadelivery.letterstring, did integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE 
  a_city Area.City%TYPE;
  a_state Area.State%TYPE;
  a_worldzone Area.WorldZone%TYPE;
  d_city Area.City%TYPE;
  d_state Area.State%TYPE;
  d_country Area.Country%TYPE;
  d_worldzone Area.WorldZone%TYPE;
BEGIN

  -- retriving account location data
  SELECT City, State, WorldZone
  INTO a_city, a_state, a_worldzone
  FROM Area
  WHERE ZipCode=Zc AND Country=Cy;

  -- retriving deposit location data
  SELECT City, State, Country, WorldZone
  INTO d_city, d_state, d_country, d_worldzone
  FROM deposit NATURAL JOIN area
  WHERE depositid=Did;

  -- checking if cities matches
  IF d_city <> a_city OR d_state <> a_state OR d_country <> Cy OR d_worldzone <> a_worldd_worldzone THEN
    perform raise_custom_error('E0008');
  END IF; 

END;
$$;


ALTER FUNCTION uninadelivery.iscitydepositshippingtoclient(zc uninadelivery.numericstring, cy uninadelivery.letterstring, did integer) OWNER TO zgenny;

--
-- Name: isdriverassignedtovalidtransport_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.isdriverassignedtovalidtransport_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE  
  d_deposit Driver.DepositID%TYPE;
  t_deposit Transport.DepositID%TYPE;
BEGIN
  SELECT DepositID
    INTO d_deposit
    FROM Driver
    WHERE BusinessMail = NEW.BusinessMail;

  SELECT DepositID
    INTO t_deposit
    FROM Transport
    WHERE TransportID = NEW.Transportid;

  IF d_deposit <> t_deposit THEN
    perform raise_custom_error('E0004');
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION uninadelivery.isdriverassignedtovalidtransport_func() OWNER TO zgenny;

--
-- Name: issamecity(uninadelivery.numericstring, uninadelivery.letterstring, uninadelivery.numericstring, uninadelivery.letterstring); Type: FUNCTION; Schema: uninadelivery; Owner: riccardoelena
--

CREATE FUNCTION uninadelivery.issamecity(zcode1 uninadelivery.numericstring, cy1 uninadelivery.letterstring, zcode2 uninadelivery.numericstring, cy2 uninadelivery.letterstring) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  C1 area.city%TYPE;
  C2 area.city%TYPE;
  S1 area.state%TYPE;
  S2 area.state%TYPE;
  Wz1 area.worldzone%TYPE;
  Wz2 area.worldzone%TYPE;
BEGIN

  -- being the couple (zipcode, country) unique, they're enough to identify a city
  SELECT city, state, worldzone
    INTO C1, S1, Wz1
    FROM area
    WHERE zipcode = ZCode1 AND country = Cy1;

  SELECT city, state, worldzone
    INTO C2, S2, Wz2
    FROM area
    WHERE zipcode = ZCode2 AND country = Cy2;

  IF C1 = C2 AND S1 = S2 AND Wz1 = Wz2 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
END;
$$;


ALTER FUNCTION uninadelivery.issamecity(zcode1 uninadelivery.numericstring, cy1 uninadelivery.letterstring, zcode2 uninadelivery.numericstring, cy2 uninadelivery.letterstring) OWNER TO riccardoelena;

--
-- Name: isshipmentassignedtovalidtransport_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.isshipmentassignedtovalidtransport_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  t_deposit Transport.DepositID%TYPE;
BEGIN
  SELECT DepositID
  INTO t_deposit
  FROM Transport
  WHERE TransportID = NEW.TransportID;

  IF t_deposit <> NEW.ShippedFrom THEN
    perform raise_custom_error('E0005');
  END IF;

  RETURN NEW;

END;
$$;


ALTER FUNCTION uninadelivery.isshipmentassignedtovalidtransport_func() OWNER TO zgenny;

--
-- Name: isshipmentcontainingvalidorders_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.isshipmentcontainingvalidorders_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
QTY stores.quantity%TYPE;
PName product.name%TYPE;
PSupply product.supplier%TYPE;
DID deposit.depositid%TYPE;

BEGIN

SELECT quantity , name , supplier 
  INTO QTY , PName , PSupply
  FROM "Order" NATURAL JOIN PRODUCT
  WHERE OrderID = NEW.OrderID;

SELECT shippedfrom
  INTO DID
  FROM shipment
  WHERE shipmentID = NEW.shipmentID;

IF NOT EXISTS (
  SELECT 1
    FROM stores
    WHERE depositid = DID AND name = PName AND supplier = PSupply AND quantity >= QTY
) THEN
  perform raise_custom_error('E0013');
END IF;

UPDATE stores
  SET quantity = quantity - QTY
  WHERE depositid = DID AND name = PName AND supplier = PSupply;

RETURN NEW;
END;

$$;


ALTER FUNCTION uninadelivery.isshipmentcontainingvalidorders_func() OWNER TO zgenny;

--
-- Name: isshipmentdirectedincorrectareaaccount_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.isshipmentdirectedincorrectareaaccount_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE 
    ZCode Account.ZipCode%TYPE;
    Cy Account.Country%TYPE;
    Tid Shipment.transportId%TYPE;
    SDate Shipment.ShippingDate%TYPE;
    Sdeposit Shipment.ShippedFrom%TYPE;
  BEGIN 
    -- Assuring it's the correct case
    IF EXISTS (
      SELECT 1
        FROM Shipment
        WHERE ShipmentID=NEW.ShipmentID AND DirectedTo IS NOT NULL
    ) THEN
      RETURN NEW;
    END IF;
  
    -- Retrieving the data needed
    SELECT ZipCode, Country 
      INTO ZCode, Cy
      FROM "Order" NATURAL JOIN Account
      WHERE OrderId = NEW.OrderID;

      
    SELECT transportId, ShippingDate, ShippedFrom
      INTO Tid, Sdate, Sdeposit
      FROM shipment
      WHERE shipmentid = NEW.shipmentid;
        
    -- calling the function to check isCityDepositShippingToClient constraint
    perform isCityDepositShippingToClient(ZCode, Cy, Sdeposit);

    -- Calling the function to insert the cover
    perform createCoversForShipment(ZCode, Cy, Tid, D);
    
    RETURN NEW;
  END;
  $$;


ALTER FUNCTION uninadelivery.isshipmentdirectedincorrectareaaccount_func() OWNER TO zgenny;

--
-- Name: isshipmentdirectedincorrectareadeposit_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.isshipmentdirectedincorrectareadeposit_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE 
  ZCode Deposit.ZipCode%TYPE;
  Cy Deposit.Country%TYPE;
BEGIN 
  IF NEW.DirectedTo IS NULL THEN 
    RETURN NEW;
  END IF;
  SELECT ZipCode, Country 
  INTO ZCode, Cy
  FROM deposit
  WHERE depositid = NEW.DirectedTo;

  perform createCoversForShipment(ZCode, Cy, NEW.transportId, NEW.ShippingDate);
  RETURN NEW;

END;
$$;


ALTER FUNCTION uninadelivery.isshipmentdirectedincorrectareadeposit_func() OWNER TO zgenny;

--
-- Name: onlyonejobperaccount_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.onlyonejobperaccount_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  flag integer;
  tableName text;
BEGIN

  FOREACH tableName IN ARRAY TG_ARGV LOOP
    IF tableName = 'driver' OR tableName = 'operator' THEN
      EXECUTE format('SELECT count(*) FROM %I WHERE Email=$1', tableName) 
      INTO flag USING NEW.Email;
    ELSE
      perform raise_custom_error('E0012');
    END IF;
  END LOOP;

  IF flag > 0 THEN
    perform raise_custom_error('E0011');
  END IF;

  RETURN NEW;

END;
$_$;


ALTER FUNCTION uninadelivery.onlyonejobperaccount_func() OWNER TO zgenny;

--
-- Name: raise_custom_error(text); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.raise_custom_error(p_error_code text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_error_message TEXT;
BEGIN
  -- Find error message in the custom_error_messages table 
  SELECT error_message INTO v_error_message
  FROM custom_error_messages
  WHERE error_code = p_error_code;

  -- Raise exception with the retrieved error message
  RAISE EXCEPTION USING 
            ERRCODE = p_error_code, 
            MESSAGE = v_error_message;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'Error % not found', p_error_code;
END;
$$;


ALTER FUNCTION uninadelivery.raise_custom_error(p_error_code text) OWNER TO zgenny;

--
-- Name: shipmentdataconsistency_func(); Type: FUNCTION; Schema: uninadelivery; Owner: riccardoelena
--

CREATE FUNCTION uninadelivery.shipmentdataconsistency_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  QTY stores.quantity%TYPE;
  PName product.name%TYPE;
  PSupply product.supplier%TYPE;
  ZCode area.zipcode%TYPE;
  Cy area.country%TYPE;
  ZCode2 area.zipcode%TYPE;
  Cy2 area.country%TYPE;
  isCorrectCity BOOLEAN;
  shipped_order Ships%ROWTYPE;
BEGIN
  -- if the shipment has already arrived, cannot be modified
  IF OLD.HasArrived = TRUE THEN
    perform raise_custom_error('E0017');
  END IF;

  -- I have to check if shipment is still directed to the correct area
  IF NEW.DirectedTo IS NOT NULL THEN
    SELECT ZipCode, Country 
      INTO ZCode, Cy
      FROM Deposit
      WHERE DepositID = NEW.DirectedTo;
  ELSE
  -- if the shipment is now towards a client, all the orders have to be directed to the same zip code 

    -- So I can pick one random order and check if all the others are directed to the same area
    SELECT ZipCode, Country 
      INTO ZCode, Cy
      FROM Ships NATURAL JOIN "Order" NATURAL JOIN Account
      WHERE ShipmentID = NEW.ShipmentID
      LIMIT 1;

    IF EXISTS (
      SELECT 1
        FROM Ships NATURAL JOIN "Order" NATURAL JOIN Account
        WHERE ShipmentID = NEW.ShipmentID AND
              (ZipCode <> ZCode OR Country <> Cy)
    ) THEN
      perform raise_custom_error('E0016');
    END IF;

    -- now, i I have to check if the new deposit is in the same city of the clients
    SELECT ZipCode, Country 
      INTO ZCode2, Cy2
      FROM deposit
      WHERE DepositID = NEW.ShippedFrom;

    IF NOT isSameCity(ZCode, Cy, ZCode2, Cy2) THEN
      perform raise_custom_error('E0008');
    END IF;

  END IF;

  -- try to update the covers table, if fails, raise error
  -- In case shipment is directed to clients ZCode and Cy are the one from clients, otherwise they are the one from directedTo deposit
  perform updateCoversForShipment( OLD.ShippingDate, OLD.TransportID, ZCode, Cy, NEW.ShippingDate, NEW.TransportID);

  
  -- if the starting deposit has changed, i have to check if the new deposit has enough products to satisfy the orders
  IF NEW.ShippedFrom <> OLD.ShippedFrom THEN

    FOR shipped_order IN (SELECT * FROM Ships WHERE ShipmentID=NEW.ShipmentID) LOOP

      -- for each order ...
      SELECT quantity , name , supplier 
        INTO QTY , PName , PSupply
        FROM "Order" NATURAL JOIN PRODUCT
        WHERE OrderID = shipped_order.OrderID;

      -- the new deposit has to have enough products to satisfy the order?
      IF NOT EXISTS (
        SELECT 1
          FROM stores
          WHERE depositid = DID AND name = PName AND supplier = PSupply AND quantity >= QTY
      ) THEN
        -- if not, raise error
        perform raise_custom_error('E0015');
      END IF;
    END LOOP;

  END IF;

  RETURN NEW;
  
END;
$$;


ALTER FUNCTION uninadelivery.shipmentdataconsistency_func() OWNER TO riccardoelena;

--
-- Name: updatecoversforshipment(date, integer, uninadelivery.numericstring, uninadelivery.letterstring, date, integer); Type: FUNCTION; Schema: uninadelivery; Owner: riccardoelena
--

CREATE FUNCTION uninadelivery.updatecoversforshipment(odate date, otransportid integer, nzc uninadelivery.numericstring, ncy uninadelivery.letterstring, ndate date, ntransportid integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE Covers 
    SET Date = NDate,
        TransportID = NTransportID,
        ZipCode = NZc,
        Country = NCy
    WHERE Date = ODate AND 
          TransportID = OTransportID;
EXCEPTION
  WHEN unique_violation THEN 
    perform raise_custom_error('E0006');
END
$$;


ALTER FUNCTION uninadelivery.updatecoversforshipment(odate date, otransportid integer, nzc uninadelivery.numericstring, ncy uninadelivery.letterstring, ndate date, ntransportid integer) OWNER TO riccardoelena;

--
-- Name: validemployeebirthdate_func(); Type: FUNCTION; Schema: uninadelivery; Owner: zgenny
--

CREATE FUNCTION uninadelivery.validemployeebirthdate_func() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
    employee_age integer;
  BEGIN
    SELECT EXTRACT( YEAR FROM age(Birthdate))
      INTO employee_age
      FROM account
      WHERE Email = NEW.Email;

    IF employee_age < 18 THEN
      perform raise_custom_error('E0001');
    END IF;
    RETURN NEW;
  END;
$$;


ALTER FUNCTION uninadelivery.validemployeebirthdate_func() OWNER TO zgenny;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: Order; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery."Order" (
    orderid integer NOT NULL,
    emissiondate date NOT NULL,
    isexpress boolean,
    extrawarranty smallint NOT NULL,
    iscompleted boolean,
    email uninadelivery.emailstring,
    quantity integer NOT NULL,
    name text,
    supplier text,
    CONSTRAINT formatorderemissiondate CHECK ((emissiondate <= CURRENT_DATE)),
    CONSTRAINT formatorderextrawarranty CHECK ((extrawarranty >= 0)),
    CONSTRAINT formatorderquantity CHECK ((quantity > 0))
);


ALTER TABLE uninadelivery."Order" OWNER TO zgenny;

--
-- Name: Order_orderid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: zgenny
--

CREATE SEQUENCE uninadelivery."Order_orderid_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery."Order_orderid_seq" OWNER TO zgenny;

--
-- Name: Order_orderid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: zgenny
--

ALTER SEQUENCE uninadelivery."Order_orderid_seq" OWNED BY uninadelivery."Order".orderid;


--
-- Name: account; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.account (
    name uninadelivery.letterstring NOT NULL,
    surname uninadelivery.letterstring NOT NULL,
    email uninadelivery.emailstring NOT NULL,
    birthdate date NOT NULL,
    propic text,
    password text,
    addressno uninadelivery.alphanumstring NOT NULL,
    street uninadelivery.alphanumstring NOT NULL,
    zipcode uninadelivery.numericstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    CONSTRAINT formataccountaddressno CHECK (((addressno)::text ~ '^[1-9]\d*[a-z]?(?:BIS)?$'::text)),
    CONSTRAINT formataccountpassword CHECK ((password ~ '^[A-Fa-f0-9]{64}$'::text)),
    CONSTRAINT formataccountpropic CHECK ((propic ~ '^\/9j\/4AAQSkZJRg[-A-Za-z0-9+\/]*={0,2}$'::text)),
    CONSTRAINT validaccountbirthdate CHECK ((EXTRACT(year FROM age((birthdate)::timestamp with time zone)) >= (16)::numeric))
);


ALTER TABLE uninadelivery.account OWNER TO zgenny;

--
-- Name: area; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.area (
    zipcode uninadelivery.numericstring NOT NULL,
    city uninadelivery.letterstring NOT NULL,
    state uninadelivery.letterstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    worldzone uninadelivery.worldzone NOT NULL
);


ALTER TABLE uninadelivery.area OWNER TO zgenny;

--
-- Name: covers; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.covers (
    transportid integer NOT NULL,
    zipcode uninadelivery.numericstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    date date
);


ALTER TABLE uninadelivery.covers OWNER TO zgenny;

--
-- Name: custom_error_messages; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.custom_error_messages (
    error_code text NOT NULL,
    error_message text NOT NULL
);


ALTER TABLE uninadelivery.custom_error_messages OWNER TO zgenny;

--
-- Name: deposit; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.deposit (
    depositid integer NOT NULL,
    occupiedspace real DEFAULT 0 NOT NULL,
    maxcapacity real NOT NULL,
    deposittype uninadelivery.deposittype NOT NULL,
    addressno uninadelivery.alphanumstring NOT NULL,
    street uninadelivery.alphanumstring NOT NULL,
    zipcode uninadelivery.numericstring NOT NULL,
    country uninadelivery.letterstring NOT NULL,
    CONSTRAINT checkdepositfullness CHECK ((occupiedspace <= maxcapacity)),
    CONSTRAINT foramtdepositmaxcapacity CHECK ((maxcapacity > (0)::double precision)),
    CONSTRAINT foramtdepositoccupiedspace CHECK ((occupiedspace >= (0)::double precision)),
    CONSTRAINT formatdepositaddressno CHECK (((addressno)::text ~ '^[1-9]\d*[a-z]?(?:BIS)?$'::text))
);


ALTER TABLE uninadelivery.deposit OWNER TO zgenny;

--
-- Name: deposit_depositid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: zgenny
--

CREATE SEQUENCE uninadelivery.deposit_depositid_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery.deposit_depositid_seq OWNER TO zgenny;

--
-- Name: deposit_depositid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: zgenny
--

ALTER SEQUENCE uninadelivery.deposit_depositid_seq OWNED BY uninadelivery.deposit.depositid;


--
-- Name: driver; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.driver (
    businessmail uninadelivery.emailstring NOT NULL,
    drivinglicencetype uninadelivery.drivinglicencetype NOT NULL,
    isavailable boolean,
    email uninadelivery.emailstring,
    depositid integer NOT NULL
);


ALTER TABLE uninadelivery.driver OWNER TO zgenny;

--
-- Name: drives; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.drives (
    transportid integer NOT NULL,
    businessmail uninadelivery.emailstring NOT NULL,
    date date NOT NULL
);


ALTER TABLE uninadelivery.drives OWNER TO zgenny;

--
-- Name: operator; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.operator (
    email uninadelivery.emailstring NOT NULL,
    businessmail uninadelivery.emailstring NOT NULL
);


ALTER TABLE uninadelivery.operator OWNER TO zgenny;

--
-- Name: product; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.product (
    category uninadelivery.letterstring NOT NULL,
    name text NOT NULL,
    supplier uninadelivery.alphanumstring DEFAULT 'UninaDelivery'::text NOT NULL,
    description text NOT NULL,
    packagesizeliters real NOT NULL,
    isfragile boolean,
    price numeric(100,2),
    CONSTRAINT checkproductdescriptionontopic CHECK (((description ~~* (('% '::text || (category)::text) || '%'::text)) AND (description ~~* (('% '::text || name) || '%'::text)) AND (description ~~* (('% '::text || (supplier)::text) || '%'::text)))),
    CONSTRAINT formatproductdescription CHECK ((description ~ '^[a-zA-Z0-9]+[\ a-zA-Z0-9!@#$%^&*()_+{}\[\]:;<>,.?~\\\/-]*$'::text)),
    CONSTRAINT formatproductname CHECK ((name ~ '^[a-zA-Z0-9]+[\ a-zA-Z0-9!@#$%^&*()_+{}\[\]:;<>,.?~\\\/-]*$'::text)),
    CONSTRAINT formatproductpackagesizeliters CHECK ((packagesizeliters > (0)::double precision)),
    CONSTRAINT formatproductprice CHECK ((price > (0)::numeric))
);


ALTER TABLE uninadelivery.product OWNER TO zgenny;

--
-- Name: shipment; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.shipment (
    shipmentid integer NOT NULL,
    shippingdate date NOT NULL,
    hasarrived boolean,
    shippedfrom integer NOT NULL,
    directedto integer,
    businessmail uninadelivery.emailstring NOT NULL,
    transportid integer NOT NULL,
    CONSTRAINT checkdifferentstartenddeposits CHECK ((shippedfrom <> directedto)),
    CONSTRAINT validshipmentdate CHECK ((shippingdate >= CURRENT_DATE))
);


ALTER TABLE uninadelivery.shipment OWNER TO zgenny;

--
-- Name: shipment_shipmentid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: zgenny
--

CREATE SEQUENCE uninadelivery.shipment_shipmentid_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery.shipment_shipmentid_seq OWNER TO zgenny;

--
-- Name: shipment_shipmentid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: zgenny
--

ALTER SEQUENCE uninadelivery.shipment_shipmentid_seq OWNED BY uninadelivery.shipment.shipmentid;


--
-- Name: ships; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.ships (
    shipmentid integer NOT NULL,
    orderid integer NOT NULL
);


ALTER TABLE uninadelivery.ships OWNER TO zgenny;

--
-- Name: stores; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.stores (
    name text NOT NULL,
    supplier text NOT NULL,
    depositid integer NOT NULL,
    quantity integer NOT NULL,
    CONSTRAINT formatstoresquantity CHECK ((quantity > 0))
);


ALTER TABLE uninadelivery.stores OWNER TO zgenny;

--
-- Name: transport; Type: TABLE; Schema: uninadelivery; Owner: zgenny
--

CREATE TABLE uninadelivery.transport (
    transportid integer NOT NULL,
    occupiedspace real DEFAULT 0 NOT NULL,
    maxcapacity real NOT NULL,
    isavailable boolean,
    transporttype uninadelivery.transporttype NOT NULL,
    depositid integer NOT NULL,
    CONSTRAINT checktransportfullness CHECK ((occupiedspace <= maxcapacity)),
    CONSTRAINT formattransportmaxcapacity CHECK ((maxcapacity > (0)::double precision)),
    CONSTRAINT formattransportoccupiedspace CHECK ((occupiedspace >= (0)::double precision))
);


ALTER TABLE uninadelivery.transport OWNER TO zgenny;

--
-- Name: transport_transportid_seq; Type: SEQUENCE; Schema: uninadelivery; Owner: zgenny
--

CREATE SEQUENCE uninadelivery.transport_transportid_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE uninadelivery.transport_transportid_seq OWNER TO zgenny;

--
-- Name: transport_transportid_seq; Type: SEQUENCE OWNED BY; Schema: uninadelivery; Owner: zgenny
--

ALTER SEQUENCE uninadelivery.transport_transportid_seq OWNED BY uninadelivery.transport.transportid;


--
-- Name: Order orderid; Type: DEFAULT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery."Order" ALTER COLUMN orderid SET DEFAULT nextval('uninadelivery."Order_orderid_seq"'::regclass);


--
-- Name: deposit depositid; Type: DEFAULT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.deposit ALTER COLUMN depositid SET DEFAULT nextval('uninadelivery.deposit_depositid_seq'::regclass);


--
-- Name: shipment shipmentid; Type: DEFAULT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.shipment ALTER COLUMN shipmentid SET DEFAULT nextval('uninadelivery.shipment_shipmentid_seq'::regclass);


--
-- Name: transport transportid; Type: DEFAULT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.transport ALTER COLUMN transportid SET DEFAULT nextval('uninadelivery.transport_transportid_seq'::regclass);


--
-- Data for Name: Order; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery."Order" (orderid, emissiondate, isexpress, extrawarranty, iscompleted, email, quantity, name, supplier) FROM stdin;
1	2023-12-31	\N	0	\N	luca@gmail.com	3	Penna	Bic
2	2023-12-31	\N	0	\N	luca@gmail.com	2	Gomma	Bic
\.


--
-- Data for Name: account; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.account (name, surname, email, birthdate, propic, password, addressno, street, zipcode, country) FROM stdin;
Luca	Bianchi	luca@gmail.com	1998-05-12	/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/2wBDAQMDAwQDBAgEBAgQCwkLEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBD/wAARCAAZABkDASIAAhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABwYI/8QAPhAAAAQEAwUDAxUAAAAAAAAAAQIDEQQFBhIABxMIFBUWIRcxUSIjQTM2N0JFUlNhYnFzdYSSlKGztMPR0v/EABgBAAMBAQAAAAAAAAAAAAAAAAQGBwMI/8QAJxEAAgAFAwMFAQEAAAAAAAAAAQIDBAURIQAGEgciQRMxUVJhobH/2gAMAwEAAhEDEQA/ACef7Mde5qwZKep6byCHiYdUI0xo2IWIQSFASCACRIwu6gehmfrjRuWtUy/Z/wBnTsLrJGIjJ9JpZNEl4iWFKpBmGJUXXTsOoJDiAEXIAuQOoGZwYRgK/rGpqXkyMfk9MRUnKkSVFcIBFOOU3USHEzpmKcALeVPym72B+vWR5nqeqpKqFZRR1qqmCKiCsKogRGJUUFyJEBApSjcJdMAACuLgPV8Bbhr89vqQl5ueQpKmMoKsvCJgMCbZFrE2N9GdI9uTVbhmc3QyqihiqglHDqy8SQQO23LznGNIGVFeSeZcU0IaMLp6D3kKHff4G+LCBzRL/gYj7pf7wfbN1DqS7mLnyno2W6m6bpxBNWF1G1r7brbmcj97OHjhr5aoD3kL+NN/vE53tGoNFrseRoaRDLLx43sxyilshjfuJ/zSL1J6bLujc81Veat6nDIY27YaL4Ujx86y7Mpt2TIFqPd+K7ycILRv0LbgE91zGf1Nmb09/TFjlplh2pTmns5eOcM3uYoRPDd21rd2XBO3VvK92i72dLm6s4n2enrShPrFP9JXD3ss+xRSX08R+9VxUd5Vidn4MVZh7gKT7AZ4n4A11P1NoVPgSRqcOHaMx4FrtleLG1r29wM2v+6vcyoLhfDvOaurre1tZrPn8cRG8/I/PCBnB7kfaP48HONuk+yaFXtnydQqEDnFf1Lnk4vaK6jCsB7ADA/ukDZFIkmoMAlPt5P3b91//9k=	e0e6097a6f8af07daf5fc7244336ba37133713a8fc7345c36d667dfa513fabaa	123	Via Roma	00123	Italy
\.


--
-- Data for Name: area; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.area (zipcode, city, state, country, worldzone) FROM stdin;
00123	Roma	RM	Italy	EUW
20145	Milano	MI	Italy	EUW
40122	Bologna	BO	Italy	EUW
70100	Bari	BA	Italy	EUW
50123	Firenze	FI	Italy	EUW
10100	Torino	TO	Italy	EUW
25121	Brescia	BS	Italy	EUW
34100	Trieste	TS	Italy	EUW
61100	Pesaro	PU	Italy	EUW
20100	Monza	MB	Italy	EUW
80100	Napoli	NA	Italy	EUW
80136	Napoli	NA	Italy	EUW
\.


--
-- Data for Name: covers; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.covers (transportid, zipcode, country, date) FROM stdin;
\.


--
-- Data for Name: custom_error_messages; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.custom_error_messages (error_code, error_message) FROM stdin;
E0001	Account birthdate is too young to be an employee
E0002	This address is already occupied
E0003	Incompatible table in input
E0004	Driver's working place and Transport's deposit not matching
E0005	The transport of this shipment don't belongs to the correct deposit
E0006	Shipment assigned to a transport already occupied with diffrent location
E0007	Account not reachable by any deposit
E0008	Shipment towords accounts must takes off from the same city of the arrival
E0009	This driver has not a valid Driving Licence for this vehicle
E0010	This transport cannot belong to this type of deposit
E0011	This account is already emplyeed
E0012	Cannot check this field for the given table. Are you sure you are calling the function for the correct table?
E0013	You cannot ship from this deposit
E0014	Are you trying to transport negative volume of goods?
E0015	This update conflict with preavious inserted data
E0016	In a shipment directed to client the order must have the same city destination
E0017	Cannot modify a shipment that has already arrived
\.


--
-- Data for Name: deposit; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.deposit (depositid, occupiedspace, maxcapacity, deposittype, addressno, street, zipcode, country) FROM stdin;
1	0	10000	City	1	Via Roma	00123	Italy
2	0	80000	Central	7BIS	Corso Umberto I	20145	Italy
3	0	12000	City	23	Via Roma	00123	Italy
4	0	15000	State	6	Viale Delle Rose	25121	Italy
5	0	25000	Country	22	Corso Stretto	50123	Italy
\.


--
-- Data for Name: driver; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.driver (businessmail, drivinglicencetype, isavailable, email, depositid) FROM stdin;
\.


--
-- Data for Name: drives; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.drives (transportid, businessmail, date) FROM stdin;
\.


--
-- Data for Name: operator; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.operator (email, businessmail) FROM stdin;
\.


--
-- Data for Name: product; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.product (category, name, supplier, description, packagesizeliters, isfragile, price) FROM stdin;
Cancelleria	Penna	Bic	La famosa Penna nera della Bic che migliorera la tua Cancelleria a casa.	0.5	\N	1.00
Cancelleria	Gomma	Bic	La famosa gomma nera della bic che migliorera la tua cancelleria a casa.	0.8	\N	1.00
\.


--
-- Data for Name: shipment; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.shipment (shipmentid, shippingdate, hasarrived, shippedfrom, directedto, businessmail, transportid) FROM stdin;
\.


--
-- Data for Name: ships; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.ships (shipmentid, orderid) FROM stdin;
\.


--
-- Data for Name: stores; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.stores (name, supplier, depositid, quantity) FROM stdin;
\.


--
-- Data for Name: transport; Type: TABLE DATA; Schema: uninadelivery; Owner: zgenny
--

COPY uninadelivery.transport (transportid, occupiedspace, maxcapacity, isavailable, transporttype, depositid) FROM stdin;
\.


--
-- Name: Order_orderid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: zgenny
--

SELECT pg_catalog.setval('uninadelivery."Order_orderid_seq"', 2, true);


--
-- Name: deposit_depositid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: zgenny
--

SELECT pg_catalog.setval('uninadelivery.deposit_depositid_seq', 1, false);


--
-- Name: shipment_shipmentid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: zgenny
--

SELECT pg_catalog.setval('uninadelivery.shipment_shipmentid_seq', 1, false);


--
-- Name: transport_transportid_seq; Type: SEQUENCE SET; Schema: uninadelivery; Owner: zgenny
--

SELECT pg_catalog.setval('uninadelivery.transport_transportid_seq', 1, false);


--
-- Name: account account_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.account
    ADD CONSTRAINT account_pk PRIMARY KEY (email);


--
-- Name: area area_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.area
    ADD CONSTRAINT area_pk PRIMARY KEY (zipcode, country);


--
-- Name: custom_error_messages custom_error_messages_pkey; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.custom_error_messages
    ADD CONSTRAINT custom_error_messages_pkey PRIMARY KEY (error_code);


--
-- Name: deposit deposit_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.deposit
    ADD CONSTRAINT deposit_pk PRIMARY KEY (depositid);


--
-- Name: driver driver_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.driver
    ADD CONSTRAINT driver_pk PRIMARY KEY (businessmail);


--
-- Name: ships noduplicateorderinshipment; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.ships
    ADD CONSTRAINT noduplicateorderinshipment UNIQUE (shipmentid, orderid);


--
-- Name: stores noduplicateproductindeposit; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.stores
    ADD CONSTRAINT noduplicateproductindeposit UNIQUE (name, supplier, depositid);


--
-- Name: covers onlyoneareaperday; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.covers
    ADD CONSTRAINT onlyoneareaperday UNIQUE (transportid, date);


--
-- Name: deposit onlyonedepositperaddress; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.deposit
    ADD CONSTRAINT onlyonedepositperaddress UNIQUE (addressno, street, zipcode, country);


--
-- Name: shipment onlyonetravelperday; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT onlyonetravelperday UNIQUE (shippingdate, transportid);


--
-- Name: drives onlyonetravelperdaydriver; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT onlyonetravelperdaydriver UNIQUE (businessmail, date);


--
-- Name: drives onlyonetravelperdaytransport; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT onlyonetravelperdaytransport UNIQUE (transportid, date);


--
-- Name: operator operator_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.operator
    ADD CONSTRAINT operator_pk PRIMARY KEY (businessmail);


--
-- Name: Order order_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery."Order"
    ADD CONSTRAINT order_pk PRIMARY KEY (orderid);


--
-- Name: product product_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.product
    ADD CONSTRAINT product_pk PRIMARY KEY (name, supplier);


--
-- Name: shipment shipment_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_pk PRIMARY KEY (shipmentid);


--
-- Name: transport transport_pk; Type: CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.transport
    ADD CONSTRAINT transport_pk PRIMARY KEY (transportid);


--
-- Name: transport correctoccupiedspaceforshipment_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER correctoccupiedspaceforshipment_up BEFORE UPDATE ON uninadelivery.transport FOR EACH ROW EXECUTE FUNCTION uninadelivery.correctoccupiedspaceforshipment_func();


--
-- Name: transport correcttransportassignment_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER correcttransportassignment_in BEFORE INSERT ON uninadelivery.transport FOR EACH ROW EXECUTE FUNCTION uninadelivery.correcttransportassignment_func();


--
-- Name: transport correcttransportassignment_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER correcttransportassignment_up BEFORE UPDATE ON uninadelivery.transport FOR EACH ROW EXECUTE FUNCTION uninadelivery.correcttransportassignment_func();


--
-- Name: drives correcttransportfordrivinglicence_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER correcttransportfordrivinglicence_in BEFORE INSERT ON uninadelivery.drives FOR EACH ROW EXECUTE FUNCTION uninadelivery.correcttransportfordrivinglicence_func();


--
-- Name: drives correcttransportfordrivinglicence_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER correcttransportfordrivinglicence_up BEFORE UPDATE ON uninadelivery.drives FOR EACH ROW EXECUTE FUNCTION uninadelivery.correcttransportfordrivinglicence_func();


--
-- Name: driver formatdriverbusinessmail_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER formatdriverbusinessmail_in BEFORE INSERT ON uninadelivery.driver FOR EACH ROW EXECUTE FUNCTION uninadelivery.formatdriverbusinessmail_func();


--
-- Name: driver formatdriverbusinessmail_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER formatdriverbusinessmail_up BEFORE UPDATE ON uninadelivery.driver FOR EACH ROW EXECUTE FUNCTION uninadelivery.formatdriverbusinessmail_func();


--
-- Name: operator formatoperatorbusinessmail_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER formatoperatorbusinessmail_in BEFORE INSERT ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.formatoperatorbusinessmail_func();


--
-- Name: operator formatoperatorbusinessmail_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER formatoperatorbusinessmail_up BEFORE UPDATE ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.formatoperatorbusinessmail_func();


--
-- Name: account isaccountreachable_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isaccountreachable_in BEFORE INSERT ON uninadelivery.account FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaccountreachable_func();


--
-- Name: account isaccountreachable_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isaccountreachable_up BEFORE UPDATE ON uninadelivery.account FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaccountreachable_func();


--
-- Name: account isaddressforsomethingspecificaccount_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isaddressforsomethingspecificaccount_in BEFORE INSERT ON uninadelivery.account FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaddressforsomethingspecific_func('Deposit');


--
-- Name: account isaddressforsomethingspecificaccount_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isaddressforsomethingspecificaccount_up BEFORE UPDATE ON uninadelivery.account FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaddressforsomethingspecific_func();


--
-- Name: deposit isaddressforsomethingspecificdeposit_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isaddressforsomethingspecificdeposit_in BEFORE INSERT ON uninadelivery.deposit FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaddressforsomethingspecific_func('Account');


--
-- Name: deposit isaddressforsomethingspecificdeposit_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isaddressforsomethingspecificdeposit_up BEFORE UPDATE ON uninadelivery.deposit FOR EACH ROW EXECUTE FUNCTION uninadelivery.isaddressforsomethingspecific_func();


--
-- Name: drives isdriverassignedtovalidtransport_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isdriverassignedtovalidtransport_in BEFORE INSERT ON uninadelivery.drives FOR EACH ROW EXECUTE FUNCTION uninadelivery.isdriverassignedtovalidtransport_func();


--
-- Name: drives isdriverassignedtovalidtransport_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isdriverassignedtovalidtransport_up BEFORE UPDATE ON uninadelivery.drives FOR EACH ROW EXECUTE FUNCTION uninadelivery.isdriverassignedtovalidtransport_func();


--
-- Name: shipment isshipmentassignedtovalidtransport_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentassignedtovalidtransport_in BEFORE INSERT ON uninadelivery.shipment FOR EACH ROW EXECUTE FUNCTION uninadelivery.isshipmentassignedtovalidtransport_func();


--
-- Name: shipment isshipmentassignedtovalidtransport_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentassignedtovalidtransport_up BEFORE UPDATE ON uninadelivery.shipment FOR EACH ROW EXECUTE FUNCTION uninadelivery.isshipmentassignedtovalidtransport_func();


--
-- Name: ships isshipmentcontainingvalidorders_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentcontainingvalidorders_in BEFORE INSERT ON uninadelivery.ships FOR EACH ROW EXECUTE FUNCTION uninadelivery.isshipmentcontainingvalidorders_func();


--
-- Name: ships isshipmentcontainingvalidorders_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentcontainingvalidorders_up BEFORE UPDATE ON uninadelivery.ships FOR EACH ROW EXECUTE FUNCTION uninadelivery.isshipmentcontainingvalidorders_func();


--
-- Name: ships isshipmentdirectedincorrectareaaccount_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentdirectedincorrectareaaccount_in BEFORE INSERT ON uninadelivery.ships FOR EACH ROW EXECUTE FUNCTION uninadelivery.isshipmentdirectedincorrectareaaccount_func();


--
-- Name: ships isshipmentdirectedincorrectareaaccount_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentdirectedincorrectareaaccount_up BEFORE UPDATE ON uninadelivery.ships FOR EACH ROW EXECUTE FUNCTION uninadelivery.isshipmentdirectedincorrectareaaccount_func();


--
-- Name: shipment isshipmentdirectedincorrectareadeposit_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentdirectedincorrectareadeposit_in BEFORE INSERT ON uninadelivery.shipment FOR EACH ROW EXECUTE FUNCTION uninadelivery.isshipmentdirectedincorrectareadeposit_func();


--
-- Name: shipment isshipmentdirectedincorrectareadeposit_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER isshipmentdirectedincorrectareadeposit_up BEFORE UPDATE ON uninadelivery.shipment FOR EACH ROW EXECUTE FUNCTION uninadelivery.shipmentdataconsistency_func();


--
-- Name: driver onlyonejobperaccountdriver_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER onlyonejobperaccountdriver_in BEFORE INSERT ON uninadelivery.driver FOR EACH ROW EXECUTE FUNCTION uninadelivery.onlyonejobperaccount_func('operator');


--
-- Name: driver onlyonejobperaccountdriver_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER onlyonejobperaccountdriver_up BEFORE UPDATE ON uninadelivery.driver FOR EACH ROW EXECUTE FUNCTION uninadelivery.onlyonejobperaccount_func('operator');


--
-- Name: operator onlyonejobperaccountdriver_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER onlyonejobperaccountdriver_up BEFORE UPDATE ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.onlyonejobperaccount_func('operator');


--
-- Name: operator onlyonejobperaccountoperator_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER onlyonejobperaccountoperator_in BEFORE INSERT ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.onlyonejobperaccount_func('driver');


--
-- Name: operator onlyonejobperaccountoperator_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER onlyonejobperaccountoperator_up BEFORE UPDATE ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.onlyonejobperaccount_func('driver');


--
-- Name: driver validdriverbirthdate_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER validdriverbirthdate_in BEFORE INSERT ON uninadelivery.driver FOR EACH ROW EXECUTE FUNCTION uninadelivery.validemployeebirthdate_func();


--
-- Name: driver validdriverbirthdate_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER validdriverbirthdate_up BEFORE UPDATE ON uninadelivery.driver FOR EACH ROW EXECUTE FUNCTION uninadelivery.validemployeebirthdate_func();


--
-- Name: operator validoperatorbirthdate_in; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER validoperatorbirthdate_in BEFORE INSERT ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.validemployeebirthdate_func();


--
-- Name: operator validoperatorbirthdate_up; Type: TRIGGER; Schema: uninadelivery; Owner: zgenny
--

CREATE TRIGGER validoperatorbirthdate_up BEFORE UPDATE ON uninadelivery.operator FOR EACH ROW EXECUTE FUNCTION uninadelivery.validemployeebirthdate_func();


--
-- Name: account account_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.account
    ADD CONSTRAINT account_fk FOREIGN KEY (zipcode, country) REFERENCES uninadelivery.area(zipcode, country) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: covers covers_fk_area; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.covers
    ADD CONSTRAINT covers_fk_area FOREIGN KEY (zipcode, country) REFERENCES uninadelivery.area(zipcode, country) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: covers covers_fk_transport; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.covers
    ADD CONSTRAINT covers_fk_transport FOREIGN KEY (transportid) REFERENCES uninadelivery.transport(transportid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: deposit deposit_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.deposit
    ADD CONSTRAINT deposit_fk FOREIGN KEY (zipcode, country) REFERENCES uninadelivery.area(zipcode, country) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: driver driver_fk_account; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.driver
    ADD CONSTRAINT driver_fk_account FOREIGN KEY (email) REFERENCES uninadelivery.account(email) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: driver driver_fk_deposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.driver
    ADD CONSTRAINT driver_fk_deposit FOREIGN KEY (depositid) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: drives drives_fk_driver; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT drives_fk_driver FOREIGN KEY (businessmail) REFERENCES uninadelivery.driver(businessmail) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: drives drives_fk_transport; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.drives
    ADD CONSTRAINT drives_fk_transport FOREIGN KEY (transportid) REFERENCES uninadelivery.transport(transportid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Order order_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery."Order"
    ADD CONSTRAINT order_fk FOREIGN KEY (email) REFERENCES uninadelivery.account(email) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: Order order_fk_product; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery."Order"
    ADD CONSTRAINT order_fk_product FOREIGN KEY (name, supplier) REFERENCES uninadelivery.product(name, supplier);


--
-- Name: shipment shipment_fk_arrivaldeposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_arrivaldeposit FOREIGN KEY (directedto) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shipment shipment_fk_operator; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_operator FOREIGN KEY (businessmail) REFERENCES uninadelivery.operator(businessmail) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shipment shipment_fk_startdeposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_startdeposit FOREIGN KEY (shippedfrom) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: shipment shipment_fk_transport; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.shipment
    ADD CONSTRAINT shipment_fk_transport FOREIGN KEY (transportid) REFERENCES uninadelivery.transport(transportid) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: ships ships_fk_order; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.ships
    ADD CONSTRAINT ships_fk_order FOREIGN KEY (orderid) REFERENCES uninadelivery."Order"(orderid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ships ships_fk_shipment; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.ships
    ADD CONSTRAINT ships_fk_shipment FOREIGN KEY (shipmentid) REFERENCES uninadelivery.shipment(shipmentid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: stores stores_fk_deposit; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.stores
    ADD CONSTRAINT stores_fk_deposit FOREIGN KEY (depositid) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: stores stores_fk_product; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.stores
    ADD CONSTRAINT stores_fk_product FOREIGN KEY (name, supplier) REFERENCES uninadelivery.product(name, supplier) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: transport transport_fk; Type: FK CONSTRAINT; Schema: uninadelivery; Owner: zgenny
--

ALTER TABLE ONLY uninadelivery.transport
    ADD CONSTRAINT transport_fk FOREIGN KEY (depositid) REFERENCES uninadelivery.deposit(depositid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

